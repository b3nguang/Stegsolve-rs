name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

permissions:
  contents: write  # 为 GITHUB_TOKEN 设置 contents 的写权限

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config
          brew install mingw-w64
          rustup target add x86_64-pc-windows-gnu

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      - name: Build with Cargo (macOS)
        if: matrix.os == 'macos-latest'
        run: cargo build --release # 构建 macOS 版本

      - name: Build with Cargo (macOS cross-compiling for Windows)
        if: matrix.os == 'macos-latest'
        run: cargo build --release --target x86_64-pc-windows-gnu # 交叉编译 Windows 版本

      - name: Build with Cargo (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: cargo build --release # 构建 Linux 版本

      - name: Run tests
        run: cargo test --verbose

      - name: Package artifacts
        run: |
          mkdir -p release
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # 构建 macOS 版本
            cp target/release/stegsolve-rs release/stegsolve-rs-${{ matrix.os }}
            tar -czvf release/stegsolve-rs-${{ matrix.os }}.tar.gz -C release stegsolve-rs-${{ matrix.os }}
            # 构建 Windows 版本
            cp target/x86_64-pc-windows-gnu/release/stegsolve-rs.exe release/stegsolve-rs-${{ matrix.os }}-windows.exe
            tar -czvf release/stegsolve-rs-${{ matrix.os }}-windows.tar.gz -C release stegsolve-rs-${{ matrix.os }}-windows.exe
          elif [[ "${{ matrix.os }}" == "linux" ]]; then
            cp target/release/stegsolve-rs release/stegsolve-rs-${{ matrix.os }}
            tar -czvf release/stegsolve-rs-${{ matrix.os }}.tar.gz -C release stegsolve-rs-${{ matrix.os }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-release
          path: release/*

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./artifacts/**/*.tar.gz
            ./artifacts/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}