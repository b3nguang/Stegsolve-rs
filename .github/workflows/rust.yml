name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config
          rustup target add x86_64-pc-windows-gnu

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev

      # 关键修复点 1：分离构建步骤，避免覆盖产物
      - name: Build macOS binary
        if: matrix.os == 'macos-latest'
        run: cargo build --release

      - name: Build Windows binary (cross-compile)
        if: matrix.os == 'macos-latest'
        run: cargo build --release --target x86_64-pc-windows-gnu

      - name: Build Linux binary
        if: matrix.os == 'ubuntu-latest'
        run: cargo build --release

      - name: Run tests
        run: cargo test --verbose

      # 关键修复点 2：修正打包逻辑，确保所有平台产物都被处理
      - name: Package artifacts
        run: |
          mkdir -p release
          case "${{ matrix.os }}" in
            macos-latest)
              # macOS 原生构建
              cp target/release/stegsolve-rs release/stegsolve-rs-macos
              # Windows 交叉编译构建
              cp target/x86_64-pc-windows-gnu/release/stegsolve-rs.exe release/stegsolve-rs-windows.exe
              ;;
            ubuntu-latest)
              cp target/release/stegsolve-rs release/stegsolve-rs-linux
              ;;
          esac

          # 统一压缩所有产物
          cd release
          tar -czvf binaries-${{ matrix.os }}.tar.gz ./*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.os }}
          path: release/binaries-${{ matrix.os }}.tar.gz

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      # 关键修复点 3：正确解压并组织文件
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find ./artifacts -name '*.tar.gz' -exec tar -xzvf {} -C release-assets \;

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}